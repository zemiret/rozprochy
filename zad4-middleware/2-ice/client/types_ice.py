# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `types.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Smarthouse
_M_Smarthouse = Ice.openModule('Smarthouse')
__name__ = 'Smarthouse'

if 'State' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.State = Ice.createTempClass()
    class State(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    State.Running = State("Running", 0)
    State.Off = State("Off", 1)
    State._enumerators = { 0:State.Running, 1:State.Off }

    _M_Smarthouse._t_State = IcePy.defineEnum('::Smarthouse::State', State, (), State._enumerators)

    _M_Smarthouse.State = State
    del State

if '_t_Lines' not in _M_Smarthouse.__dict__:
    _M_Smarthouse._t_Lines = IcePy.defineSequence('::Smarthouse::Lines', (), IcePy._t_string)

if 'OvenProgram' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.OvenProgram = Ice.createTempClass()
    class OvenProgram(object):
        def __init__(self, temperature=0.0, hours=0, minutes=0, seconds=0):
            self.temperature = temperature
            self.hours = hours
            self.minutes = minutes
            self.seconds = seconds

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Smarthouse.OvenProgram):
                return NotImplemented
            else:
                if self.temperature != other.temperature:
                    return False
                if self.hours != other.hours:
                    return False
                if self.minutes != other.minutes:
                    return False
                if self.seconds != other.seconds:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_OvenProgram)

        __repr__ = __str__

    _M_Smarthouse._t_OvenProgram = IcePy.defineStruct('::Smarthouse::OvenProgram', OvenProgram, (), (
        ('temperature', (), IcePy._t_float),
        ('hours', (), IcePy._t_int),
        ('minutes', (), IcePy._t_int),
        ('seconds', (), IcePy._t_int)
    ))

    _M_Smarthouse.OvenProgram = OvenProgram
    del OvenProgram

if 'GenericError' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.GenericError = Ice.createTempClass()
    class GenericError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthouse::GenericError'

    _M_Smarthouse._t_GenericError = IcePy.defineException('::Smarthouse::GenericError', GenericError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    GenericError._ice_type = _M_Smarthouse._t_GenericError

    _M_Smarthouse.GenericError = GenericError
    del GenericError

_M_Smarthouse._t_DeviceCloud = IcePy.defineValue('::Smarthouse::DeviceCloud', Ice.Value, -1, (), False, True, None, ())

if 'DeviceCloudPrx' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.DeviceCloudPrx = Ice.createTempClass()
    class DeviceCloudPrx(Ice.ObjectPrx):

        def listDevices(self, context=None):
            return _M_Smarthouse.DeviceCloud._op_listDevices.invoke(self, ((), context))

        def listDevicesAsync(self, context=None):
            return _M_Smarthouse.DeviceCloud._op_listDevices.invokeAsync(self, ((), context))

        def begin_listDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.DeviceCloud._op_listDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_listDevices(self, _r):
            return _M_Smarthouse.DeviceCloud._op_listDevices.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthouse.DeviceCloudPrx.ice_checkedCast(proxy, '::Smarthouse::DeviceCloud', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthouse.DeviceCloudPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::DeviceCloud'
    _M_Smarthouse._t_DeviceCloudPrx = IcePy.defineProxy('::Smarthouse::DeviceCloud', DeviceCloudPrx)

    _M_Smarthouse.DeviceCloudPrx = DeviceCloudPrx
    del DeviceCloudPrx

    _M_Smarthouse.DeviceCloud = Ice.createTempClass()
    class DeviceCloud(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthouse::DeviceCloud')

        def ice_id(self, current=None):
            return '::Smarthouse::DeviceCloud'

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::DeviceCloud'

        def listDevices(self, current=None):
            raise NotImplementedError("servant method 'listDevices' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_DeviceCloudDisp)

        __repr__ = __str__

    _M_Smarthouse._t_DeviceCloudDisp = IcePy.defineClass('::Smarthouse::DeviceCloud', DeviceCloud, (), None, ())
    DeviceCloud._ice_type = _M_Smarthouse._t_DeviceCloudDisp

    DeviceCloud._op_listDevices = IcePy.Operation('listDevices', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthouse._t_Lines, False, 0), ())

    _M_Smarthouse.DeviceCloud = DeviceCloud
    del DeviceCloud

_M_Smarthouse._t_Device = IcePy.defineValue('::Smarthouse::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getName(self, context=None):
            return _M_Smarthouse.Device._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_Smarthouse.Device._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Device._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_Smarthouse.Device._op_getName.end(self, _r)

        def getState(self, context=None):
            return _M_Smarthouse.Device._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_Smarthouse.Device._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Device._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_Smarthouse.Device._op_getState.end(self, _r)

        def turnOn(self, context=None):
            return _M_Smarthouse.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_Smarthouse.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_Smarthouse.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_Smarthouse.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_Smarthouse.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_Smarthouse.Device._op_turnOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthouse.DevicePrx.ice_checkedCast(proxy, '::Smarthouse::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthouse.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Device'
    _M_Smarthouse._t_DevicePrx = IcePy.defineProxy('::Smarthouse::Device', DevicePrx)

    _M_Smarthouse.DevicePrx = DevicePrx
    del DevicePrx

    _M_Smarthouse.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthouse::Device')

        def ice_id(self, current=None):
            return '::Smarthouse::Device'

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Device'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_DeviceDisp)

        __repr__ = __str__

    _M_Smarthouse._t_DeviceDisp = IcePy.defineClass('::Smarthouse::Device', Device, (), None, ())
    Device._ice_type = _M_Smarthouse._t_DeviceDisp

    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthouse._t_State, False, 0), ())
    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Smarthouse._t_GenericError,))
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Smarthouse._t_GenericError,))

    _M_Smarthouse.Device = Device
    del Device

_M_Smarthouse._t_Oven = IcePy.defineValue('::Smarthouse::Oven', Ice.Value, -1, (), False, True, None, ())

if 'OvenPrx' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.OvenPrx = Ice.createTempClass()
    class OvenPrx(_M_Smarthouse.DevicePrx):

        def getProgram(self, context=None):
            return _M_Smarthouse.Oven._op_getProgram.invoke(self, ((), context))

        def getProgramAsync(self, context=None):
            return _M_Smarthouse.Oven._op_getProgram.invokeAsync(self, ((), context))

        def begin_getProgram(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Oven._op_getProgram.begin(self, ((), _response, _ex, _sent, context))

        def end_getProgram(self, _r):
            return _M_Smarthouse.Oven._op_getProgram.end(self, _r)

        def setProgram(self, program, context=None):
            return _M_Smarthouse.Oven._op_setProgram.invoke(self, ((program, ), context))

        def setProgramAsync(self, program, context=None):
            return _M_Smarthouse.Oven._op_setProgram.invokeAsync(self, ((program, ), context))

        def begin_setProgram(self, program, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Oven._op_setProgram.begin(self, ((program, ), _response, _ex, _sent, context))

        def end_setProgram(self, _r):
            return _M_Smarthouse.Oven._op_setProgram.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthouse.OvenPrx.ice_checkedCast(proxy, '::Smarthouse::Oven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthouse.OvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Oven'
    _M_Smarthouse._t_OvenPrx = IcePy.defineProxy('::Smarthouse::Oven', OvenPrx)

    _M_Smarthouse.OvenPrx = OvenPrx
    del OvenPrx

    _M_Smarthouse.Oven = Ice.createTempClass()
    class Oven(_M_Smarthouse.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthouse::Device', '::Smarthouse::Oven')

        def ice_id(self, current=None):
            return '::Smarthouse::Oven'

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Oven'

        def getProgram(self, current=None):
            raise NotImplementedError("servant method 'getProgram' not implemented")

        def setProgram(self, program, current=None):
            raise NotImplementedError("servant method 'setProgram' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_OvenDisp)

        __repr__ = __str__

    _M_Smarthouse._t_OvenDisp = IcePy.defineClass('::Smarthouse::Oven', Oven, (), None, (_M_Smarthouse._t_DeviceDisp,))
    Oven._ice_type = _M_Smarthouse._t_OvenDisp

    Oven._op_getProgram = IcePy.Operation('getProgram', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthouse._t_OvenProgram, False, 0), (_M_Smarthouse._t_GenericError,))
    Oven._op_setProgram = IcePy.Operation('setProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Smarthouse._t_OvenProgram, False, 0),), (), None, (_M_Smarthouse._t_GenericError,))

    _M_Smarthouse.Oven = Oven
    del Oven

_M_Smarthouse._t_Bulbulator = IcePy.defineValue('::Smarthouse::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(_M_Smarthouse.DevicePrx):

        def getJoke(self, context=None):
            return _M_Smarthouse.Bulbulator._op_getJoke.invoke(self, ((), context))

        def getJokeAsync(self, context=None):
            return _M_Smarthouse.Bulbulator._op_getJoke.invokeAsync(self, ((), context))

        def begin_getJoke(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Bulbulator._op_getJoke.begin(self, ((), _response, _ex, _sent, context))

        def end_getJoke(self, _r):
            return _M_Smarthouse.Bulbulator._op_getJoke.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthouse.BulbulatorPrx.ice_checkedCast(proxy, '::Smarthouse::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthouse.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Bulbulator'
    _M_Smarthouse._t_BulbulatorPrx = IcePy.defineProxy('::Smarthouse::Bulbulator', BulbulatorPrx)

    _M_Smarthouse.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_Smarthouse.Bulbulator = Ice.createTempClass()
    class Bulbulator(_M_Smarthouse.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthouse::Bulbulator', '::Smarthouse::Device')

        def ice_id(self, current=None):
            return '::Smarthouse::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Bulbulator'

        def getJoke(self, current=None):
            raise NotImplementedError("servant method 'getJoke' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_BulbulatorDisp)

        __repr__ = __str__

    _M_Smarthouse._t_BulbulatorDisp = IcePy.defineClass('::Smarthouse::Bulbulator', Bulbulator, (), None, (_M_Smarthouse._t_DeviceDisp,))
    Bulbulator._ice_type = _M_Smarthouse._t_BulbulatorDisp

    Bulbulator._op_getJoke = IcePy.Operation('getJoke', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Smarthouse._t_Lines, False, 0), (_M_Smarthouse._t_GenericError,))

    _M_Smarthouse.Bulbulator = Bulbulator
    del Bulbulator

_M_Smarthouse._t_Wihajster = IcePy.defineValue('::Smarthouse::Wihajster', Ice.Value, -1, (), False, True, None, ())

if 'WihajsterPrx' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.WihajsterPrx = Ice.createTempClass()
    class WihajsterPrx(_M_Smarthouse.BulbulatorPrx):

        def setTarget(self, target, context=None):
            return _M_Smarthouse.Wihajster._op_setTarget.invoke(self, ((target, ), context))

        def setTargetAsync(self, target, context=None):
            return _M_Smarthouse.Wihajster._op_setTarget.invokeAsync(self, ((target, ), context))

        def begin_setTarget(self, target, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Wihajster._op_setTarget.begin(self, ((target, ), _response, _ex, _sent, context))

        def end_setTarget(self, _r):
            return _M_Smarthouse.Wihajster._op_setTarget.end(self, _r)

        def describeTarget(self, context=None):
            return _M_Smarthouse.Wihajster._op_describeTarget.invoke(self, ((), context))

        def describeTargetAsync(self, context=None):
            return _M_Smarthouse.Wihajster._op_describeTarget.invokeAsync(self, ((), context))

        def begin_describeTarget(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Wihajster._op_describeTarget.begin(self, ((), _response, _ex, _sent, context))

        def end_describeTarget(self, _r):
            return _M_Smarthouse.Wihajster._op_describeTarget.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthouse.WihajsterPrx.ice_checkedCast(proxy, '::Smarthouse::Wihajster', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthouse.WihajsterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Wihajster'
    _M_Smarthouse._t_WihajsterPrx = IcePy.defineProxy('::Smarthouse::Wihajster', WihajsterPrx)

    _M_Smarthouse.WihajsterPrx = WihajsterPrx
    del WihajsterPrx

    _M_Smarthouse.Wihajster = Ice.createTempClass()
    class Wihajster(_M_Smarthouse.Bulbulator):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthouse::Bulbulator', '::Smarthouse::Device', '::Smarthouse::Wihajster')

        def ice_id(self, current=None):
            return '::Smarthouse::Wihajster'

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Wihajster'

        def setTarget(self, target, current=None):
            raise NotImplementedError("servant method 'setTarget' not implemented")

        def describeTarget(self, current=None):
            raise NotImplementedError("servant method 'describeTarget' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_WihajsterDisp)

        __repr__ = __str__

    _M_Smarthouse._t_WihajsterDisp = IcePy.defineClass('::Smarthouse::Wihajster', Wihajster, (), None, (_M_Smarthouse._t_BulbulatorDisp,))
    Wihajster._ice_type = _M_Smarthouse._t_WihajsterDisp

    Wihajster._op_setTarget = IcePy.Operation('setTarget', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Smarthouse._t_GenericError,))
    Wihajster._op_describeTarget = IcePy.Operation('describeTarget', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Smarthouse._t_GenericError,))

    _M_Smarthouse.Wihajster = Wihajster
    del Wihajster

_M_Smarthouse._t_Mykens = IcePy.defineValue('::Smarthouse::Mykens', Ice.Value, -1, (), False, True, None, ())

if 'MykensPrx' not in _M_Smarthouse.__dict__:
    _M_Smarthouse.MykensPrx = Ice.createTempClass()
    class MykensPrx(_M_Smarthouse.BulbulatorPrx):

        def setSpeed(self, speed, context=None):
            return _M_Smarthouse.Mykens._op_setSpeed.invoke(self, ((speed, ), context))

        def setSpeedAsync(self, speed, context=None):
            return _M_Smarthouse.Mykens._op_setSpeed.invokeAsync(self, ((speed, ), context))

        def begin_setSpeed(self, speed, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Mykens._op_setSpeed.begin(self, ((speed, ), _response, _ex, _sent, context))

        def end_setSpeed(self, _r):
            return _M_Smarthouse.Mykens._op_setSpeed.end(self, _r)

        def mykensuj(self, context=None):
            return _M_Smarthouse.Mykens._op_mykensuj.invoke(self, ((), context))

        def mykensujAsync(self, context=None):
            return _M_Smarthouse.Mykens._op_mykensuj.invokeAsync(self, ((), context))

        def begin_mykensuj(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthouse.Mykens._op_mykensuj.begin(self, ((), _response, _ex, _sent, context))

        def end_mykensuj(self, _r):
            return _M_Smarthouse.Mykens._op_mykensuj.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthouse.MykensPrx.ice_checkedCast(proxy, '::Smarthouse::Mykens', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthouse.MykensPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Mykens'
    _M_Smarthouse._t_MykensPrx = IcePy.defineProxy('::Smarthouse::Mykens', MykensPrx)

    _M_Smarthouse.MykensPrx = MykensPrx
    del MykensPrx

    _M_Smarthouse.Mykens = Ice.createTempClass()
    class Mykens(_M_Smarthouse.Bulbulator):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthouse::Bulbulator', '::Smarthouse::Device', '::Smarthouse::Mykens')

        def ice_id(self, current=None):
            return '::Smarthouse::Mykens'

        @staticmethod
        def ice_staticId():
            return '::Smarthouse::Mykens'

        def setSpeed(self, speed, current=None):
            raise NotImplementedError("servant method 'setSpeed' not implemented")

        def mykensuj(self, current=None):
            raise NotImplementedError("servant method 'mykensuj' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthouse._t_MykensDisp)

        __repr__ = __str__

    _M_Smarthouse._t_MykensDisp = IcePy.defineClass('::Smarthouse::Mykens', Mykens, (), None, (_M_Smarthouse._t_BulbulatorDisp,))
    Mykens._ice_type = _M_Smarthouse._t_MykensDisp

    Mykens._op_setSpeed = IcePy.Operation('setSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Smarthouse._t_GenericError,))
    Mykens._op_mykensuj = IcePy.Operation('mykensuj', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Smarthouse._t_GenericError,))

    _M_Smarthouse.Mykens = Mykens
    del Mykens

# End of module Smarthouse
